services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Reference variables from the .env file
      - DATABASE_HOSTNAME=${DATABASE_HOSTNAME}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      db:
        condition: service_healthy
     
    # Remove ports → no direct access

  db:
    image: postgres:13
    environment:
      # Use environment file variables for the database too
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:4.8.1-standalone
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - ADMINER_DEFAULT_SERVER=db

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro  # ./nginx.conf → mounted as default.conf and :ro,Read-only → container can’t modify your file                                               
    depends_on:
      backend:
        condition: service_started # Nginx waits for the healthcheck to pass!


volumes:
  postgres_data: